@foreach (var tag in this.Tags)
{
    <MudChip Text="@tag" Disabled="@Disabled" OnClose="RemoveThisTag"></MudChip>
}

<form onsubmit="return false;" class="d-inline">
    <div class="mud-input my-1">
        <input @bind="NewTagName" 
               @bind:event="oninput"
               disabled="@this.Disabled"
            class="mud-input-slot mud-input-root"
            placeholder="Tag name"        
            @onkeydown="@OnKeyUp">
    </div>
</form>

@code {
    [Parameter]
    public List<string> Tags { get; set; } = new();
    [Parameter]
    public EventCallback<List<string>> TagsChanged { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    public string NewTagName { get; set; } = string.Empty;

    private async Task OnKeyUp(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Code == "Enter")
            await this.AddAdornment();
        else if (eventArgs.Code == "Backspace")
            await this.RemoveLastTag();
    }
    private async Task AddAdornment()
    {
        if (string.IsNullOrWhiteSpace(this.NewTagName))
            return;
            
        var newTagNameTrimmed = this.NewTagName.Trim();
        
        // Dont allow duplicate tags
        if (this.Tags.Contains(newTagNameTrimmed) == false)
            this.Tags.Add(this.NewTagName.Trim());

        this.NewTagName = string.Empty;

        await this.TagsChanged.InvokeAsync(this.Tags);
    }

    private async Task RemoveLastTag()
    {
        if (string.IsNullOrEmpty(this.NewTagName) is false)
            return;       
            
        if (this.Tags.Any())
        {
            var lastTag = this.Tags.Last();
            this.Tags.RemoveAt(this.Tags.Count - 1);

            this.NewTagName = lastTag;
            
            await this.TagsChanged.InvokeAsync(this.Tags);
        }
    }

    private async Task RemoveThisTag(MudChip chip)
    {
        this.Tags.Remove(chip.Text);
        await this.TagsChanged.InvokeAsync(this.Tags);
    }
}
