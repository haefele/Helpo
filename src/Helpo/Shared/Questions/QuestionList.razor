@page "/questions"

<AuthorizeView>
    <Authorized>
        <MudButton Variant="Variant.Filled" 
                   Color="Color.Primary"
                   Link="/questions/ask">
            Ask new question
        </MudButton>
    </Authorized>
</AuthorizeView>

<MudDataGrid T="QuestionViewModel" class="mt-4" ServerData="@LoadQuestions" RowClick="@QuestionClicked" CurrentPage="@Page">
    <Columns>
        <Column T="QuestionViewModel" Field="HasAcceptedAnswer" Title="Has Answer">
            <CellTemplate>
                @if (@context.HasAcceptedAnswer)
                {
                    <MudTooltip Text="This question got answered.">
                        <MudIcon Icon="@Icons.Filled.Check" Color="Color.Success" />
                    </MudTooltip>
                }
                else 
                {
                    <MudTooltip Text="This question does not have an answer yet.">
                        <MudIcon Icon="@Icons.Filled.QuestionMark" />
                    </MudTooltip>
                }
            </CellTemplate>
        </Column>
        <Column T="QuestionViewModel" Field="Title" />
        <Column T="QuestionViewModel" Field="Content" />
        <Column T="QuestionViewModel" Field="Tags">
            <CellTemplate>
                @foreach(var tag in @context.Tags)
                {
                    <MudChip Text="@tag" class="my-n2" />
                }
            </CellTemplate>
        </Column>
        <Column T="QuestionViewModel" Field="AskedByUser" Title="Asked by" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="QuestionViewModel" DisableRowsPerPage="true" />
    </PagerContent>
</MudDataGrid>

@code {

    [Inject]
    public QuestionsService QuestionsService { get; set; } = default!;

    [Inject]
    public NavigationManager NavigationManager { get; set; } = default!;

    [Parameter]
    [SupplyParameterFromQuery]
    public int Page { get; set; } = 0;

    private async Task<GridData<QuestionViewModel>> LoadQuestions(GridState<QuestionViewModel> state)
    {
        this.NavigationManager.NavigateTo(this.NavigationManager.GetUriWithQueryParameter("page", state.Page), forceLoad: false, replace: true);

        var (questions, totalCount) = await this.QuestionsService.GetQuestions(state.Page, state.PageSize, default);

        var result = new GridData<QuestionViewModel>();
        result.Items = questions;
        result.TotalItems = totalCount;

        return result;
    }

    private void QuestionClicked(DataGridRowClickEventArgs<QuestionViewModel> args)
    {
        var question = args.Item;
    }
}
