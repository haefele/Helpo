@page "/questions/ask"
@attribute [Authorize]

<PageTitle>Ask question</PageTitle>

<EditForm Model="@this" OnValidSubmit="@(() => this._askQuestionCommand.ExecuteAsync(null))">
    <DataAnnotationsValidator />

    <MudContainer MaxWidth="MaxWidth.Medium">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h5">Ask a new question</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudTextField Label="Title" 
                              @bind-Value="this.Title" 
                              For="@(() => this.Title)"
                              HelperText="Use a short but descriptive title for your question" 
                              Disabled="@this._askQuestionCommand.IsRunning" 
                              Variant="Variant.Outlined" />
                <MudTextField Label="Question" 
                              @bind-Value="this.Question" 
                              For="@(() => this.Question)" 
                              HelperText="Explain your question in as much detail as possible. Remember to give context. Where are you, what are you doing, what is happening etc."
                              Disabled="@this._askQuestionCommand.IsRunning"                               
                              Variant="Variant.Outlined"
                              Lines="5" />
                <MudTextField Label="Tags" 
                              @bind-Value="this.Tags" 
                              For="@(() => this.Tags)" 
                              HelperText="Add some comma separated tags to this question, like the area your question touches on."
                              Disabled="@this._askQuestionCommand.IsRunning"                               
                              Variant="Variant.Outlined" />
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" 
                           Variant="Variant.Filled" 
                           EndIcon="@Icons.Filled.Login"
                           Color="Color.Primary" 
                           class="ml-auto mr-2 mb-2" 
                           Size="Size.Large"
                           disabled="@this._askQuestionCommand.IsRunning">
                    @if (this._askQuestionCommand.IsRunning)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                        <MudText Class="ms-2">Posting question</MudText>
                    }
                    else
                    {
                        <MudText>ASK QUESTION</MudText>
                    }
                </MudButton>
            </MudCardActions>
        </MudCard>

        @if (this._askQuestionCommand.ErrorMessage != null)
        {
            <MudAlert Severity="Severity.Error" Elevation="1" class="mt-4">@this._askQuestionCommand.ErrorMessage</MudAlert>
        }
    </MudContainer>
</EditForm>

@code {
    [Inject]
    public QuestionsService QuestionsService { get; set; } = default!;

    [Required]
    public string? Title { get; set; }

    [Required]
    public string? Question { get; set; }

    [Required]
    public string? Tags { get; set; }

    private AsyncRelayCommand _askQuestionCommand;

    public AskQuestion()
    {
        this._askQuestionCommand = new AsyncRelayCommand(this.OnAskQuestion);
    }

    private async Task OnAskQuestion() 
    {
        var actualTags = this.Tags!.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries).ToList();

        await this.QuestionsService.AskQuestion(this.Title!, this.Question!, actualTags, this._askQuestionCommand.CancellationToken);
    }
}